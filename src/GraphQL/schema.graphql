# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type FirstQueryType {
  text: String!
}

type OrderCreationModel {
  userId: String
  orderId: String!
}

type TravelInfoModel {
  startHourTravel: Float!
  priceTravel: Float!
  remainingNumberSeats: Float!
}

type RemoveOrderModel {
  orderId: String!
  userId: String
}

type LoginModel {
  isAuth: Boolean!
  userRole: RolesEnum!
  userId: String!
}

enum RolesEnum {
  None
  User
  Admin
}

type CreateUserAccountModel {
  message: String!
}

type UserPersonalDataModel {
  userName: String!
  userNumberPhone: String!
  userLogin: String!
}

type UpdateUserPersonalDataModel {
  userName: String!
  userNumberPhone: String!
  userLogin: String!
}

type UpdateUserPasswordModel {
  isPasswordSaved: Boolean!
}

type DispatcherOrderData {
  idOrder: String!
  direction: DirectionsEnum!
  clientName: String!
  clientPhone: String!
}

enum DirectionsEnum {
  none
  toMinsk
  toSoligorsk
}

type DispatcherOrdersModel {
  date: String!
  time: Float!
  orders: [DispatcherOrderData!]!
}

type ClientCurrentOrdersModel {
  orderId: String!
  direction: DirectionsEnum!
  haltName: String!
  haltTime: String!
  orderPrice: Float!
  numberSeats: Float!
  date: String!
  startHour: Float!
}

type Query {
  firstQuery: FirstQueryType!
  TravelInfo(travelInfoData: TravelInfoArgs!): [TravelInfoModel!]!
  IsAuth: LoginModel!
  UserPersonalData: UserPersonalDataModel!
  DispatcherOrdersInfo(dispatcherOrdersInfoData: DispatcherOrdersInfoArgs!): [DispatcherOrdersModel!]!
  ClientCurrentOrders: [ClientCurrentOrdersModel!]!
  ClientArchiveOrders: [ClientCurrentOrdersModel!]!
}

input TravelInfoArgs {
  direction: DirectionsEnum!
  date: String!
}

input DispatcherOrdersInfoArgs {
  date: String
  startHour: Float
  direction: DirectionsEnum
}

type Mutation {
  createOrder(createOrderData: Order!): OrderCreationModel!
  removeOrder(removeOrderData: RemoveOrderArgs!): RemoveOrderModel!
  createUserAccount(createUserAccountData: CreateUserAccountArgs!): CreateUserAccountModel!
  login(loginData: LoginArgs!): LoginModel!
  logout: LoginModel!
  updateUserPersonalData(newUserPersonalData: UpdateUserPersonalDataArgs!): UpdateUserPersonalDataModel!
  updateUserPassword(updateUserPasswordData: UpdateUserPasswordArgs!): UpdateUserPasswordModel!
}

input Order {
  orderId: String!
  secondaryOrderData: SecondaryOrderData!
  mainOrderData: MainOrderData!
  clientData: ClientData!
}

input SecondaryOrderData {
  haltName: String!
  haltTime: String!
  orderPrice: Float!
  numberSeatsOrdered: Float!
}

input MainOrderData {
  direction: DirectionsEnum!
  date: String!
  startHour: Float!
}

input ClientData {
  clientName: String!
  clientNumberPhone: String!
  clientId: String
}

input RemoveOrderArgs {
  orderId: String!
  mainOrderData: MainOrderData!
  userId: String
}

input CreateUserAccountArgs {
  idUser: String!
  userName: String!
  userNumberPhone: String!
  userLogin: String!
  userPassword: String!
}

input LoginArgs {
  userLogin: String!
  userPassword: String!
}

input UpdateUserPersonalDataArgs {
  userName: String!
  userNumberPhone: String!
  userLogin: String!
}

input UpdateUserPasswordArgs {
  oldPassword: String!
  newPassword: String!
}
